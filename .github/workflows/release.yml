---
name: Release

on:
  schedule:
    # Run nightly at 00:00 UTC
    - cron: '0 0 * * *'
  push:
    tags:
      # Match semantic version tags like v1.2.3
      - 'v[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:  # Allow manual triggering

permissions:
  contents: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.release_type.outputs.type }}
      release_tag: ${{ steps.release_type.outputs.tag }}
      release_name: ${{ steps.release_type.outputs.name }}
      prerelease: ${{ steps.release_type.outputs.prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Determine release type
        id: release_type
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "type=version" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "name=Release ${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "type=nightly" >> $GITHUB_OUTPUT
            echo "tag=nightly" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "name=Nightly Build $(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing nightly release
        if: steps.release_type.outputs.type == 'nightly'
        continue-on-error: true
        run: |
          # Delete the release first
          gh release delete nightly --yes || true
          # Delete the tag
          git push --delete origin nightly || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create nightly tag
        if: steps.release_type.outputs.type == 'nightly'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f nightly
          git push -f origin nightly

      - name: Generate release notes
        id: release_notes
        run: |
          if [ "${{ steps.release_type.outputs.type }}" = "version" ]; then
            # For version releases, generate changelog from git log
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$PREVIOUS_TAG" ]; then
              echo "# Changes since $PREVIOUS_TAG" > release_notes.md
              git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" >> release_notes.md
            else
              echo "# Release ${{ steps.release_type.outputs.tag }}" > release_notes.md
              git log --pretty=format:"- %s (%h)" -10 >> release_notes.md
            fi
          else
            # For nightly, show recent commits
            echo "# Nightly Build - $(date +'%Y-%m-%d')" > release_notes.md
            echo "" >> release_notes.md
            echo "Automated nightly build from the main branch." >> release_notes.md
            echo "" >> release_notes.md
            echo "## Recent Changes" >> release_notes.md
            git log --pretty=format:"- %s (%h)" -10 >> release_notes.md
          fi

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.md
          retention-days: 1

  # Call the build workflow to generate all artifacts
  build:
    name: Build All Platforms
    needs: prepare-release
    uses: ./.github/workflows/build.yml

  publish-release:
    name: Publish Release
    needs: [prepare-release, build]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create archives from build.yml artifacts
        run: |
          mkdir -p build
          
          # Process artifacts from build.yml (uncompressed binaries)
          for dir in artifacts/linux-amd64 artifacts/windows-amd64 artifacts/darwin-*; do
            if [ -d "$dir" ]; then
              cd "$dir"
              for file in venture-server-* venture-client-*; do
                if [ -f "$file" ]; then
                  # Determine the appropriate archive format
                  if [[ "$file" == *.exe ]]; then
                    zip "${file%.exe}.zip" "$file"
                    mv "${file%.exe}.zip" ../../build/
                  else
                    tar czf "${file}.tar.gz" "$file"
                    mv "${file}.tar.gz" ../../build/
                  fi
                fi
              done
              cd - > /dev/null
            fi
          done

      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.release_tag }}
          name: ${{ needs.prepare-release.outputs.release_name }}
          body_path: release_notes.md
          prerelease: ${{ needs.prepare-release.outputs.prerelease }}
          files: build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

