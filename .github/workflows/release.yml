---
name: Release

on:
  schedule:
    # Run nightly at 00:00 UTC
    - cron: '0 0 * * *'
  push:
    tags:
      # Match semantic version tags like v1.2.3
      - 'v[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      release_type: ${{ steps.release_type.outputs.type }}
      release_tag: ${{ steps.release_type.outputs.tag }}
      release_name: ${{ steps.release_type.outputs.name }}
      prerelease: ${{ steps.release_type.outputs.prerelease }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Determine release type
        id: release_type
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "type=version" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "name=Release ${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "type=nightly" >> $GITHUB_OUTPUT
            echo "tag=nightly" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "name=Nightly Build $(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing nightly release
        if: steps.release_type.outputs.type == 'nightly'
        continue-on-error: true
        run: |
          # Delete the release first
          gh release delete nightly --yes || true
          # Delete the tag
          git push --delete origin nightly || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create nightly tag
        if: steps.release_type.outputs.type == 'nightly'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f nightly
          git push -f origin nightly

      - name: Generate release notes
        id: release_notes
        run: |
          if [ "${{ steps.release_type.outputs.type }}" = "version" ]; then
            # For version releases, generate changelog from git log
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$PREVIOUS_TAG" ]; then
              echo "# Changes since $PREVIOUS_TAG" > release_notes.md
              git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" >> release_notes.md
            else
              echo "# Release ${{ steps.release_type.outputs.tag }}" > release_notes.md
              git log --pretty=format:"- %s (%h)" -10 >> release_notes.md
            fi
          else
            # For nightly, show recent commits
            echo "# Nightly Build - $(date +'%Y-%m-%d')" > release_notes.md
            echo "" >> release_notes.md
            echo "Automated nightly build from the main branch." >> release_notes.md
            echo "" >> release_notes.md
            echo "## Recent Changes" >> release_notes.md
            git log --pretty=format:"- %s (%h)" -10 >> release_notes.md
          fi

      - name: Upload release notes
        uses: actions/upload-artifact@v4
        with:
          name: release-notes
          path: release_notes.md
          retention-days: 1

  build-linux:
    name: Build Linux
    needs: prepare-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install build dependencies
        run: sudo apt-get update && sudo apt-get install -y libc6-dev libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev libasound2-dev pkg-config

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Build binaries
        env:
          GOARCH: ${{ matrix.arch }}
        run: |
          mkdir -p build
          
          # Build server
          go build -tags test -ldflags="-s -w" -o "build/venture-server-linux-${{ matrix.arch }}" ./cmd/server
          
          # Build client
          go build -ldflags="-s -w" -o "build/venture-client-linux-${{ matrix.arch }}" ./cmd/client

      - name: Create archives
        run: |
          cd build
          tar czf venture-server-linux-${{ matrix.arch }}.tar.gz venture-server-linux-${{ matrix.arch }}
          tar czf venture-client-linux-${{ matrix.arch }}.tar.gz venture-client-linux-${{ matrix.arch }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}
          path: build/*.tar.gz
          retention-days: 1

  build-windows:
    name: Build Windows
    needs: prepare-release
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Build binaries
        run: |
          New-Item -ItemType Directory -Force -Path build
          
          # Build server
          go build -tags test -ldflags="-s -w" -o "build/venture-server-windows-amd64.exe" ./cmd/server
          
          # Build client
          go build -ldflags="-s -w" -o "build/venture-client-windows-amd64.exe" ./cmd/client

      - name: Create archives
        run: |
          cd build
          Compress-Archive -Path venture-server-windows-amd64.exe -DestinationPath venture-server-windows-amd64.zip
          Compress-Archive -Path venture-client-windows-amd64.exe -DestinationPath venture-client-windows-amd64.zip

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: windows-amd64
          path: build/*.zip
          retention-days: 1

  build-macos:
    name: Build macOS
    needs: prepare-release
    runs-on: macos-latest
    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      - name: Download dependencies
        run: go mod download

      - name: Build binaries
        env:
          GOARCH: ${{ matrix.arch }}
        run: |
          mkdir -p build
          
          # Build server
          go build -tags test -ldflags="-s -w" -o "build/venture-server-darwin-${{ matrix.arch }}" ./cmd/server
          
          # Build client
          go build -ldflags="-s -w" -o "build/venture-client-darwin-${{ matrix.arch }}" ./cmd/client

      - name: Create archives
        run: |
          cd build
          tar czf venture-server-darwin-${{ matrix.arch }}.tar.gz venture-server-darwin-${{ matrix.arch }}
          tar czf venture-client-darwin-${{ matrix.arch }}.tar.gz venture-client-darwin-${{ matrix.arch }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: darwin-${{ matrix.arch }}
          path: build/*.tar.gz
          retention-days: 1

  build-android:
    name: Build Android
    needs: prepare-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'
          cache: 'gradle'

      - name: Set up Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components
        run: |
          yes | sdkmanager "build-tools;34.0.0"
          yes | sdkmanager "platforms;android-34"
          yes | sdkmanager "ndk;26.1.10909125"

      - name: Install ebitenmobile
        run: |
          go install github.com/hajimehoshi/ebiten/v2/cmd/ebitenmobile@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Download dependencies
        run: go mod download

      - name: Build Android AAR
        run: ./scripts/build-android.sh aar

      - name: Create archive
        run: |
          cd build/android/libs
          zip venture-android-${{ needs.prepare-release.outputs.release_tag }}.zip mobile.aar

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: android
          path: build/android/libs/*.zip
          retention-days: 1

  build-ios:
    name: Build iOS
    needs: prepare-release
    runs-on: macos-13

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'
          cache: true

      - name: Install ebitenmobile
        run: |
          go install github.com/hajimehoshi/ebiten/v2/cmd/ebitenmobile@latest
          echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

      - name: Download dependencies
        run: go mod download

      - name: Build iOS XCFramework
        run: ./scripts/build-ios.sh xcframework

      - name: Create archive
        run: |
          cd build/ios
          zip -r venture-ios-${{ needs.prepare-release.outputs.release_tag }}.zip Mobile.xcframework

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ios
          path: build/ios/*.zip
          retention-days: 1

  publish-release:
    name: Publish Release
    needs: [prepare-release, build-linux, build-windows, build-macos, build-android, build-ios]
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Organize artifacts
        run: |
          mkdir -p build
          find artifacts -type f \( -name "*.tar.gz" -o -name "*.zip" \) -exec cp {} build/ \;

      - name: Download release notes
        uses: actions/download-artifact@v4
        with:
          name: release-notes
          path: .

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.release_tag }}
          name: ${{ needs.prepare-release.outputs.release_name }}
          body_path: release_notes.md
          prerelease: ${{ needs.prepare-release.outputs.prerelease }}
          files: build/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

