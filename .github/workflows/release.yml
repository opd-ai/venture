---
name: Release

on:
  schedule:
    # Run nightly at 00:00 UTC
    - cron: '0 0 * * *'
  push:
    tags:
      # Match semantic version tags like v1.2.3
      - 'v[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for changelog generation

      - name: Install build dependencies
        run: sudo apt-get install libc6-dev libgl1-mesa-dev libxcursor-dev libxi-dev libxinerama-dev libxrandr-dev libxxf86vm-dev libasound2-dev pkg-config

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Download dependencies
        run: go mod download

      - name: Determine release type
        id: release_type
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "type=version" >> $GITHUB_OUTPUT
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "name=Release ${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "type=nightly" >> $GITHUB_OUTPUT
            echo "tag=nightly" >> $GITHUB_OUTPUT
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "name=Nightly Build $(date +'%Y-%m-%d')" >> $GITHUB_OUTPUT
          fi

      - name: Delete existing nightly release
        if: steps.release_type.outputs.type == 'nightly'
        continue-on-error: true
        run: |
          # Delete the release first
          gh release delete nightly --yes || true
          # Delete the tag
          git push --delete origin nightly || true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create nightly tag
        if: steps.release_type.outputs.type == 'nightly'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -f nightly
          git push -f origin nightly

      - name: Build binaries
        run: |
          mkdir -p build

          # Define platforms
          platforms=(
            "linux/amd64"
            "linux/arm64"
            "darwin/amd64"
            "darwin/arm64"
            "windows/amd64"
          )

          for platform in "${platforms[@]}"; do
            IFS='/' read -r goos goarch <<< "$platform"

            # Build server
            server_name="venture-server-${goos}-${goarch}"
            if [ "$goos" = "windows" ]; then
              server_name="${server_name}.exe"
            fi

            echo "Building server for $goos/$goarch..."
            GOOS=$goos GOARCH=$goarch go build -tags test -ldflags="-s -w" -o "build/${server_name}" ./cmd/server

            # Build client
            client_name="venture-client-${goos}-${goarch}"
            if [ "$goos" = "windows" ]; then
              client_name="${client_name}.exe"
            fi

            echo "Building client for $goos/$goarch..."
            GOOS=$goos GOARCH=$goarch go build -ldflags="-s -w" -o "build/${client_name}" ./cmd/client

            # Create archives
            if [ "$goos" = "windows" ]; then
              (cd build && zip "${server_name%.exe}.zip" "$server_name")
              (cd build && zip "${client_name%.exe}.zip" "$client_name")
            else
              (cd build && tar czf "${server_name}.tar.gz" "$server_name")
              (cd build && tar czf "${client_name}.tar.gz" "$client_name")
            fi
          done

      - name: Generate release notes
        id: release_notes
        run: |
          if [ "${{ steps.release_type.outputs.type }}" = "version" ]; then
            # For version releases, generate changelog from git log
            PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
            if [ -n "$PREVIOUS_TAG" ]; then
              echo "# Changes since $PREVIOUS_TAG" > release_notes.md
              git log ${PREVIOUS_TAG}..HEAD --pretty=format:"- %s (%h)" >> release_notes.md
            else
              echo "# Release ${{ steps.release_type.outputs.tag }}" > release_notes.md
              git log --pretty=format:"- %s (%h)" -10 >> release_notes.md
            fi
          else
            # For nightly, show recent commits
            echo "# Nightly Build - $(date +'%Y-%m-%d')" > release_notes.md
            echo "" >> release_notes.md
            echo "Automated nightly build from the main branch." >> release_notes.md
            echo "" >> release_notes.md
            echo "## Recent Changes" >> release_notes.md
            git log --pretty=format:"- %s (%h)" -10 >> release_notes.md
          fi

      - name: Create release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_type.outputs.tag }}
          name: ${{ steps.release_type.outputs.name }}
          body_path: release_notes.md
          prerelease: ${{ steps.release_type.outputs.prerelease }}
          files: |
            build/*.tar.gz
            build/*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-android:
    name: Build Android
    needs: release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install ebitenmobile
        run: go install github.com/hajimehoshi/ebiten/v2/cmd/ebitenmobile@latest

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3

      - name: Install Android SDK components
        run: |
          sdkmanager "build-tools;34.0.0"
          sdkmanager "platforms;android-34"
          sdkmanager "ndk;26.1.10909125"

      - name: Initialize ebitenmobile
        run: ebitenmobile init -javac /usr/bin/javac

      - name: Download dependencies
        run: go mod download

      - name: Determine release tag
        id: release_info
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=nightly" >> $GITHUB_OUTPUT
          fi

      - name: Build Android AAR
        run: |
          mkdir -p build/android
          ebitenmobile bind -target android -javac /usr/bin/javac -o build/android/venture.aar ./cmd/mobile

      - name: Build Android APK
        run: |
          cd build/android
          cat > build.gradle << 'EOF'
          plugins {
              id 'com.android.application'
          }

          android {
              namespace 'com.venture.game'
              compileSdk 34

              defaultConfig {
                  applicationId "com.venture.game"
                  minSdk 21
                  targetSdk 34
                  versionCode 1
                  versionName "${{ steps.release_info.outputs.tag }}"
              }

              buildTypes {
                  release {
                      minifyEnabled false
                  }
              }
          }

          repositories {
              google()
              mavenCentral()
          }

          dependencies {
              implementation files('venture.aar')
          }
          EOF

          mkdir -p src/main/res/values
          cat > src/main/res/values/strings.xml << 'EOF'
          <?xml version="1.0" encoding="utf-8"?>
          <resources>
              <string name="app_name">Venture</string>
          </resources>
          EOF

          cp ../../build/android/AndroidManifest.xml src/main/
          gradle assembleRelease

      - name: Upload APK to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_info.outputs.tag }}
          files: |
            build/android/venture.aar
            build/android/build/outputs/apk/release/*.apk
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-ios:
    name: Build iOS
    needs: release
    runs-on: macos-13

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.24.x'

      - name: Install ebitenmobile
        run: go install github.com/hajimehoshi/ebiten/v2/cmd/ebitenmobile@latest

      - name: Initialize ebitenmobile
        run: ebitenmobile init

      - name: Download dependencies
        run: go mod download

      - name: Determine release tag
        id: release_info
        run: |
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          else
            echo "tag=nightly" >> $GITHUB_OUTPUT
          fi

      - name: Build iOS XCFramework
        run: |
          mkdir -p build/ios
          ebitenmobile bind -target ios -o build/ios/Venture.xcframework ./cmd/mobile

      - name: Create iOS Framework Archive
        run: |
          cd build/ios
          zip -r Venture-ios-${{ steps.release_info.outputs.tag }}.zip Venture.xcframework

      - name: Upload iOS Framework to release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.release_info.outputs.tag }}
          files: build/ios/Venture-ios-*.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

